// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.scp.coordinator.protos.keymanagement.shared.api.v1;

import "coordinator/protos/keymanagement/shared/api/v1/encryption_key_type.proto";
import "coordinator/protos/keymanagement/shared/api/v1/key_data.proto";

option java_package = "com.google.scp.coordinator.protos.keymanagement.shared.api.v1";
option java_outer_classname = "EncryptionKeyProto";

/** Represents a singular or distributed encryption key. */
message EncryptionKey {
  /**
   * Unique resource identifier.
   *
   * e.g. keys/{keyId}
   */
  string name = 1;
  /** The type of key, and how it is split. */
  EncryptionKeyType encryption_key_type = 2;
  /** Tink keyset handle containing the public key material. */
  string public_keyset_handle = 3;
  /** The raw public key material, Base64 encoded. */
  string public_key_material = 4;
  /** Key creation time in Unix epoch milliseconds. */
  int64 creation_time = 5;
  /**
   * Timestamp, represented in epoch milliseconds, when keys are first made
   * active and available through the API for encryption.
   */
  optional int64 activation_time = 9;
  /**
   * Timestamp, represented in Unix epoch milliseconds, when clients are
   * expected to no longer use this key for encypting new payloads.
   *
   * Depending on use case, clients may still continue to encrypt payloads with
   * an "expired" key if the client does not yet have new keys available yet.
   *
   * Payload processing servers should continue to have access to and cache keys
   * until ttl_time. The "expiration" time should only be used by a payload
   * processing server to determine when clients are expected to stop encrypting
   * new payloads with this key.
   */
  int64 expiration_time = 6;
  /**
   * Timestamp, represented in epoch seconds, when this key is removed from
   * database and will stop being returned to payload processing servers.
   *
   * TTL time is represented in seconds, rather than milliseconds, due to
   * DynamoDB TTL requirements.
   */
  int32 ttl_time = 7;
  /** List of KeyData. */
  repeated KeyData key_data = 8;
}
