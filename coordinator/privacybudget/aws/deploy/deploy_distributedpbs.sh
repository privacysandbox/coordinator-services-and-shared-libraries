#!/usr/bin/env bash
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script allows deploying a distributed PBS environment
# It is intended to be run locally within the deployment directory,
# adjacent to environments_mp_primary and environments_mp_secondary
#
# Args:
#   required:
#    --aws_region=<value> \ # The aws region for the deployment
#    --environment=<value> \ # The environment directory name
#    --coordinator=<value> \ # The coordinator name, use to complete 'environments_mp_' directory name
#    --release_version=<value> # The version of this release
#
#   optional:
#   --auto_approve=true # Not required, but must be provided as true if given. Will auto-approve terraform.
#   --use_tf_plan=true # Not required, but must be provided as true if given, Will look for predetermined tf_plan files generated by create_tfplan_distributedpbs.sh.
#
# `./deploy_distributedpbs.sh help` for usage instructions.

set -euo pipefail

ecr_repository_name=''

function deploy_pbs_base() {
    environment_dir=$1
    auto_approve=$2
    use_tf_plan=$3
    plan_version_suffix=$4

    terraform -chdir=$environment_dir/distributedpbs_base init -input=false

    if [ "$auto_approve" = true ]; then
      if [ "$use_tf_plan" = true ]; then
        terraform -chdir=$environment_dir/distributedpbs_base apply -input=false -auto-approve dpbs_base_tfplan_$plan_version_suffix | tee tfapply.dpbs_base_$plan_version_suffix.txt
      else
        terraform -chdir=$environment_dir/distributedpbs_base apply -input=false -auto-approve | tee tfapply.dpbs_base_$plan_version_suffix.txt
      fi
    else
      if [ "$use_tf_plan" = true ]; then
        terraform -chdir=$environment_dir/distributedpbs_base apply -input=false dpbs_base_tfplan_$plan_version_suffix | tee tfapply.dpbs_base_$plan_version_suffix.txt
      else
        terraform -chdir=$environment_dir/distributedpbs_base apply -input=false | tee tfapply.dpbs_base_$plan_version_suffix.txt
      fi
    fi

    # Get the ECR repository name
    ecr_repository_name=$(terraform -chdir=$environment_dir/distributedpbs_base output -raw ecr_repository_name)
}

function deploy_pbs_application() {
    environment_dir=$1
    image_version_tag=$2
    auto_approve=$3
    use_tf_plan=$4
    plan_version_suffix=$5

    generated_version_tf_vars_file=$environment_dir/distributedpbs_application/version.auto.tfvars

    # Delete the generated auto.tfvars containing the version file if it exists
    if [ -f "$generated_version_tf_vars_file" ]; then
      if [ "$use_tf_plan" = false ]; then
        rm -f $generated_version_tf_vars_file
      fi
    fi

    if [ "$use_tf_plan" = false ]; then
      # Create the auto.tfvars version file
      touch $generated_version_tf_vars_file
      echo "# This file is autogenerated in an automated deployment by deploy_distributedpbs.sh" >> $generated_version_tf_vars_file
      echo "beanstalk_app_version = \"$image_version_tag\"" >> $generated_version_tf_vars_file
    fi

    terraform -chdir=$environment_dir/distributedpbs_application init -input=false

    if [ "$auto_approve" = true ]; then
      if [ "$use_tf_plan" = true ]; then
        terraform -chdir=$environment_dir/distributedpbs_application apply -input=false \
                  -auto-approve dpbs_app_tfplan_$plan_version_suffix | tee tfapply.dpbs_app_$plan_version_suffix.txt
      else
        terraform -chdir=$environment_dir/distributedpbs_application apply -input=false \
          -auto-approve | tee tfapply.dpbs_app_$plan_version_suffix.txt
      fi
    else
      if [ "$use_tf_plan" = true ]; then
        terraform -chdir=$environment_dir/distributedpbs_application apply -input=false dpbs_app_tfplan_$plan_version_suffix | tee tfapply.dpbs_app_$plan_version_suffix.txt
      else
        terraform -chdir=$environment_dir/distributedpbs_application apply -input=false | tee tfapply.dpbs_app_$plan_version_suffix.txt
      fi
    fi
}

function validate_input() {
  if [ ! -d "$environment_dir" ]; then
      echo "ERROR: Environment directory [$environment_dir] does not exist."
      exit 1
  fi

  if [ ! -f "$container_image_tar" ]; then
      echo "ERROR: PBS container image tar [$container_image_tar] does not exist."
      exit 1
  fi

  if [ "$use_tf_plan" = true ]; then
    if [ ! -f "$environment_dir/distributedpbs_base/dpbs_base_tfplan_$plan_version_suffix" ]; then
      echo "Trying to apply a tf_plan but \'dpbs_base_tfplan_$plan_version_suffix\' does not exist."
      exit 1
    fi
    if [ ! -f "$environment_dir/distributedpbs_application/dpbs_app_tfplan_$plan_version_suffix" ]; then
      echo "Trying to apply a tf_plan but \'dpbs_app_tfplan_$plan_version_suffix\' does not exist."
      exit 1
    fi
  fi
}

if [[ "$#" -lt 1 || $1 == "help" ]]; then
help_msg=$(cat <<-END
  \n
  To deploy a given environment provide the aws_region, environment name, the coordinator name, the release version.\n
  This script uses the configured AWS account.\n
  Example:
  \n\n
  ./deploy_distributedpbs.sh --aws_region=us-east-1 --environment=staging --coordinator=primary --release_version=v1
  \n\n
  Additionally the optional parameter --auto_approve=true can be provided to auto-approve terraform apply, and/or the
  optional parameter --use_tf_plan=true can be provided to apply a tfplan generated from create_tfplan_distributedpbs.sh.
  \n\n
  In the example above, the environment deployed would be:
  \n\n
  environments_mp_primary\n
  \t|__staging\n
  \t\t|__distributedpbs_base\n
  \t\t|__distributedpbs_application\n
  \n\n
  Where the following would occur:\n
  1. The terraform environment under distributedpbs_base would be deployed.\n
  2. The pbs container image under dist would be pushed to the \n
  \tcontainer registry belonging to this environment.\n
  3.The terraform environment under distributedpbs_application would be deployed.\n
END
)
  echo -e $help_msg
  exit 1
fi

if [ "$#" -lt 4 ]; then
error_msg=$(cat <<-END
  Must provide all required inputs:\n
    --aws_region=<value>\n
    --environment=<value>\n
    --coordinator=<value>\n
    --release_version=<value>\n
END
)
  echo -e $error_msg
  exit 1
fi

auto_approve=false
use_tf_plan=false

while [ $# -gt 0 ]; do
  case "$1" in
    --aws_region=*)
      aws_region="${1#*=}"
      ;;
    --environment=*)
      environment="${1#*=}"
      ;;
    --coordinator=*)
      coordinator="${1#*=}"
      ;;
    --release_version=*)
      release_version="${1#*=}"
      ;;
    --auto_approve=*)
      auto_approve="${1#*=}"
      ;;
    --use_tf_plan=*)
      use_tf_plan="${1#*=}"
      ;;
    *)
      printf "***************************\n"
      printf "* Error: Invalid argument.*\n"
      printf "***************************\n"
      exit 1
  esac
  shift
done

export TF_IN_AUTOMATION=1

environment_dir="./environments_mp_$coordinator/$environment"
container_image_tar="./dist/reproducible_pbs_container_aws.tar"
plan_version_suffix="$environment"_"$coordinator"_"$release_version"
# Fail early if expected files do not exist
validate_input

# Deploy the distributedpbs_base resources for this environment
deploy_pbs_base "$environment_dir" "$auto_approve" "$use_tf_plan" "$plan_version_suffix"

current_timestamp=$(date +"%Y%m%d%H%M%S")

if [ "$use_tf_plan" = true ]; then
  version_tag="$(cat $environment_dir/distributedpbs_application/version.auto.tfvars | grep beanstalk_app_version | awk '{ print $3 }' | tr -d '"')"
else
  version_tag="pbs-$release_version-$current_timestamp"
fi

# Push the PBS container image to the ECR repository for this environment
./push_distributedpbs_container_image.sh \
--aws_region=$aws_region \
--ecr_repository_name=$ecr_repository_name \
--release_version=$version_tag

# Deploy the distributedpbs_application resources for this environment
deploy_pbs_application "$environment_dir" "$version_tag" "$auto_approve" "$use_tf_plan" "$plan_version_suffix"
