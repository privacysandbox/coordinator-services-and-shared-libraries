#!/usr/bin/env bash

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script allows deploying a distributed PBS environment
# It is intended to be run locally within the deployment directory,
# adjacent to environments_mp_primary and environments_mp_secondary
#
# Args:
#   required:
#    --gcp_region=<value> \ # The GCP region for the deployment
#    --environment=<value> \ # The environment directory name
#    --coordinator=<value> \ # The coordinator name, use to complete 'environments_mp_' directory name
#    --release_version=<value> # The version of this release
#
#   optional:
#   --auto_approve=true # Not required, but must be provided as true if given. Will auto-approve terraform.
#   --use_tf_plan=true # Not required, but must be provided as true if given, Will look for predetermined tf_plan files generated by create_tfplan_distributedpbs.sh.
#
# `./deploy_distributedpbs.sh help` for usage instructions.

set -euo pipefail

function validate_input() {
  if [ ! -d "$environment_dir" ]; then
    echo "ERROR: Environment directory [$environment_dir] does not exist."
    exit 1
  fi

  if [ ! -f "$container_image_tar" ]; then
    echo "ERROR: PBS container image tar [$container_image_tar] does not exist."
    exit 1
  fi
}

function deploy_pbs_base() {
  terraform -chdir=$environment_dir/distributedpbs_base init -input=false

  if [ "$auto_approve" = true ]; then
    if [ "$use_tf_plan" = true ]; then
      terraform -chdir=$environment_dir/distributedpbs_base apply -input=false -auto-approve tfplan.pbs_base_$plan_version_suffix | tee $environment_dir/distributedpbs_base/tfapply.pbs_base_$plan_version_suffix.txt
    else
      terraform -chdir=$environment_dir/distributedpbs_base apply -input=false -auto-approve | tee $environment_dir/distributedpbs_base/tfapply.pbs_base_$plan_version_suffix.txt
    fi
  else
    if [ "$use_tf_plan" = true ]; then
      terraform -chdir=$environment_dir/distributedpbs_base apply -input=false tfplan.pbs_base_$plan_version_suffix | tee $environment_dir/distributedpbs_base/tfapply.pbs_base_$plan_version_suffix.txt
    else
      terraform -chdir=$environment_dir/distributedpbs_base apply -input=false | tee $environment_dir/distributedpbs_base/tfapply.pbs_base_$plan_version_suffix.txt
    fi
  fi
}

function capture_base_deployment_outputs() {
  # Captures this deployment's artifact registry name and the service account email.
  artifact_registry_name="$(terraform -chdir=$environment_dir/distributedpbs_base output -raw artifact_registry_repository_name)"
  pbs_service_account_email="$(terraform -chdir=$environment_dir/distributedpbs_base output -raw pbs_service_account_email)"
  gcp_project_id="$(terraform -chdir=$environment_dir/distributedpbs_base output -raw project_id)"
}

function push_container_image() {
  ./push_distributedpbs_container_image.sh \
  --gcp_region=$gcp_region \
  --artifact_registry_name=$artifact_registry_name \
  --release_version=$version_tag \
  --gcp_project_id=$gcp_project_id
}

function update_pbs_spanner_proto_bundle_and_column() {
  echo "Updating PBS Spanner Proto bundle..."
  proto_bundle_file_path="./dist/budget_value_proto-descriptor-set.proto.bin"
  if [ ! -f "$proto_bundle_file_path" ]; then
      echo "WARNING: PBS proto bundle [$proto_bundle_file_path] does not exist."
      return
  fi

  # Check whether the proto bundle already exists in the PBS Spanner database.
  has_proto_bundle=$(gcloud spanner databases execute-sql $pbs_database_name \
  --instance=$pbs_database_instance_name \
  --sql='SELECT COUNT(PROTO_BUNDLE) as proto_bundle_count FROM `INFORMATION_SCHEMA`.`SCHEMATA` WHERE PROTO_BUNDLE IS NOT NULL' \
  --project=$gcp_project_id \
  --quiet)
  exit_status=$?

  if [ $exit_status -ne 0 ]; then
    echo "Failed to read information schema for BudgetKey Spanner DB."
    exit $exit_status
  fi

  # All proto messages that need to be used by PBS Spanner database.
  all_bundles="
  (
    \`privacy_sandbox_pbs.BudgetValue\`
  )
  "

  has_proto_bundle=$(echo $has_proto_bundle | sed -n '1p')
  if [ "$has_proto_bundle" = "proto_bundle_count 1" ]; then
    echo "Proto bundle found in BudgetKey DB. Updating proto bundle..."
    gcloud spanner databases ddl update $pbs_database_name --instance=$pbs_database_instance_name \
    --ddl="ALTER PROTO BUNDLE UPDATE $all_bundles;" \
    --proto-descriptors-file=$proto_bundle_file_path \
    --project=$gcp_project_id \
    --quiet
    exit_status=$?
  else
    echo "No proto bundle in BudgetKey DB. Creating proto bundle..."
    gcloud spanner databases ddl update $pbs_database_name --instance=$pbs_database_instance_name \
    --ddl="CREATE PROTO BUNDLE $all_bundles;" \
    --proto-descriptors-file=$proto_bundle_file_path \
    --project=$gcp_project_id \
    --quiet
    exit_status=$?
  fi

  if [ $exit_status -ne 0 ]; then
    echo "Failed to create or update proto bundle for BudgetKey DB."
    exit $exit_status
  fi

  echo "Creating ValueProto column if it does not exist in PBS Spanner database..."
  gcloud spanner databases ddl update $pbs_database_name --instance=$pbs_database_instance_name \
  --ddl="ALTER TABLE $pbs_spanner_budget_key_table_name ADD COLUMN IF NOT EXISTS ValueProto privacy_sandbox_pbs.BudgetValue;" \
  --project=$gcp_project_id \
  --quiet
}

function deploy_pbs_application() {
  local generated_version_tf_vars_file
  generated_version_tf_vars_file=$environment_dir/distributedpbs_application/version.auto.tfvars

  # Delete the generated auto.tfvars containing the version file if it exists
  if [ -f "$generated_version_tf_vars_file" ]; then
    rm -f $generated_version_tf_vars_file
  fi

  # Create the auto.tfvars version file
  touch $generated_version_tf_vars_file
  echo "# This file is autogenerated in an automated deployment by deploy_distributedpbs.sh" >> $generated_version_tf_vars_file
  echo "pbs_service_account_email = \"$pbs_service_account_email\"" >> $generated_version_tf_vars_file
  echo "pbs_image_tag             = \"$version_tag\"" >> $generated_version_tf_vars_file

  terraform -chdir=$environment_dir/distributedpbs_application init -input=false

  if [ "$auto_approve" = true ]; then
      if [ "$use_tf_plan" = true ]; then
        terraform -chdir=$environment_dir/distributedpbs_application apply -input=false \
                  -auto-approve tfplan.pbs_app_$plan_version_suffix | tee $environment_dir/distributedpbs_application/tfapply.pbs_app_$plan_version_suffix.txt
      else
        terraform -chdir=$environment_dir/distributedpbs_application apply -input=false \
          -auto-approve | tee $environment_dir/distributedpbs_application/tfapply.pbs_app_$plan_version_suffix.txt
      fi
    else
      if [ "$use_tf_plan" = true ]; then
        terraform -chdir=$environment_dir/distributedpbs_application apply -input=false tfplan.pbs_app_$plan_version_suffix | tee $environment_dir/distributedpbs_application/tfapply.pbs_app_$plan_version_suffix.txt
      else
        terraform -chdir=$environment_dir/distributedpbs_application apply -input=false | tee $environment_dir/distributedpbs_application/tfapply.pbs_app_$plan_version_suffix.txt
      fi
  fi
}

function capture_application_deployment_outputs() {
  # Captures this deployment's outputs for setting a default entry into the partition lock.
  pbs_database_instance_name="$(terraform -chdir=$environment_dir/distributedpbs_application output -raw pbs_spanner_instance_name)"
  pbs_database_name="$(terraform -chdir=$environment_dir/distributedpbs_application output -raw pbs_spanner_database_name)"
  pbs_spanner_budget_key_table_name="$(terraform -chdir=$environment_dir/distributedpbs_application output -raw pbs_spanner_budget_key_table_name)"

  # Captures this deployment's outputs for inserting the remote coordinator service account email into this coordinator's auth table.
  pbs_remote_service_account_email="$(terraform -chdir=$environment_dir/distributedpbs_application output -raw pbs_remote_coordinator_service_account_email)"
  auth_database_instance_name="$(terraform -chdir=$environment_dir/distributedpbs_application output -raw pbs_auth_spanner_reporting_origin_instance_name)"
  auth_database_name="$(terraform -chdir=$environment_dir/distributedpbs_application output -raw pbs_auth_spanner_reporting_origin_database_name)"
  auth_database_table_v2_name="$(terraform -chdir=$environment_dir/distributedpbs_application output -raw pbs_auth_spanner_authorization_v2_table_name)"
}

function insert_default_partition_lock_entry() {
  local record_count
  record_count=`gcloud spanner databases execute-sql $pbs_database_name --project=$gcp_project_id --instance=$pbs_database_instance_name --sql='SELECT COUNT(*) AS Count FROM PartitionLockTable' --format=json | jq -r .rows[0][0]`
  if [[ "$record_count" == "0" ]]; then
    (gcloud spanner databases execute-sql $pbs_database_name --project=$gcp_project_id --instance=$pbs_database_instance_name --sql="""INSERT INTO
      PartitionLockTable (LockId, Value)
    VALUES
      ('0', JSON'{\"LeaseExpirationTimestamp\": \"0\", \"LeaseOwnerId\": \"default\", \"LeaseOwnerServiceEndpointAddress\": \"0.0.0.0:80\"}')
    THEN RETURN
      LockId,
      Value;""") > /dev/null 2> /dev/null
  fi
}

function insert_remote_coordinator_auth_record() {
  # Will only insert if the PBS remote coordinator service account is provided.
  if [[ -n "$pbs_remote_service_account_email" ]]; then
    ./insert_auth_entry.sh \
    --instance=$auth_database_instance_name \
    --database=$auth_database_name \
    --table_v2=$auth_database_table_v2_name \
    --account=$pbs_remote_service_account_email \
    --site="https://remote-coordinator.com" \
    --project=$gcp_project_id
  fi
}

if [[ "$#" -lt 1 || $1 == "help" ]]; then
help_msg=$(cat <<-END
  \n
  To deploy a given environment provide the gcp region, environment name, the coordinator name, the release version.\n
  This script uses the configured GCP project and account credentials.\n
  Example:
  \n\n
  ./deploy_distributedpbs.sh --gcp_region=us-central1 --environment=staging --coordinator=primary --release_version=v1
  \n\n
  Additionally the optional parameter --auto_approve=true can be provided to auto-approve terraform apply, and/or the
  optional parameter --use_tf_plan=true can be provided to apply a tfplan generated from create_tfplan_distributedpbs.sh.
  \n\n
  In the example above, the environment deployed would be:
  \n\n
  environments_mp_primary\n
  \t|__staging\n
  \t\t|__distributedpbs_base\n
  \t\t|__distributedpbs_application\n
  \n\n
  Where the following would occur:\n
  1. The terraform environment under distributedpbs_base would be deployed.\n
  2. The pbs container image under dist would be pushed to the \n
  \tcontainer registry belonging to this environment.\n
  3.The terraform environment under distributedpbs_application would be deployed.\n
END
)
  echo -e $help_msg
  exit 1
fi

if [ "$#" -lt 4 ]; then
error_msg=$(cat <<-END
  Must provide all required inputs:\n
    --gcp_region=<value>\n
    --environment=<value>\n
    --coordinator=<value>\n
    --release_version=<value>\n
END
)
  echo -e $error_msg
  exit 1
fi

auto_approve=false
use_tf_plan=false

while [ $# -gt 0 ]; do
  case "$1" in
    --gcp_region=*)
      gcp_region="${1#*=}"
      ;;
    --environment=*)
      environment="${1#*=}"
      ;;
    --coordinator=*)
      coordinator="${1#*=}"
      ;;
    --release_version=*)
      release_version="${1#*=}"
      ;;
    --auto_approve=*)
      auto_approve="${1#*=}"
      ;;
    --use_tf_plan=*)
      use_tf_plan="${1#*=}"
      ;;
    *)
      printf "***************************\n"
      printf "* Error: Invalid argument.*\n"
      printf "***************************\n"
      exit 1
  esac
  shift
done

export TF_IN_AUTOMATION=1

# Fail early if expected files do not exist
environment_dir="./environments_mp_$coordinator/$environment"
container_image_tar="./dist/reproducible_pbs_container_gcp.tar"
plan_version_suffix="$environment"_"$coordinator"_"$release_version"
validate_input

# Deploy the distributedpbs_base resources for this environment.
deploy_pbs_base

# Capture the outputs from the distributedpbs_base deployment.
echo "Collecting base layer outputs."
gcp_project_id=''
artifact_registry_name=''
pbs_service_account_email=''
capture_base_deployment_outputs

# Create a version tag and
current_timestamp=$(date +"%Y%m%d%H%M%S")

if [ "$use_tf_plan" = true ]; then
  version_tag="$(cat $environment_dir/distributedpbs_application/version.auto.tfvars | grep pbs_image_tag | awk '{ print $3 }' | tr -d '"')"
else
  version_tag="pbs-$release_version-$current_timestamp"
fi

# Push the container image to the artifact registry repository for this environment.
push_container_image

# Deploy the distributedpbs_application resources for this environment.
deploy_pbs_application

# Capture the outputs from the distributedpbs_application deployment.
echo "Collecting application layer outputs."
auth_database_instance_name=''
auth_database_name=''
pbs_database_instance_name=''
pbs_database_name=''
pbs_spanner_budget_key_table_name=''
pbs_remote_service_account_email=''
capture_application_deployment_outputs

# Update proto bundle and proto column for PBS Spanner database. This step must happen after PBS
# application deployment because the pbs_database_name and pbs_database_instance_name are known
# after the deployment.
update_pbs_spanner_proto_bundle_and_column

# Insert a default entry into the Spanner partition lock.
insert_default_partition_lock_entry

# Insert the remote coordinator's email into the Spanner auth table if the email has been provided.
insert_remote_coordinator_auth_record
