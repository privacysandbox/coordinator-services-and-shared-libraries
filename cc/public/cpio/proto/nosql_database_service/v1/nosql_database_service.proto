// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cmrt.sdk.nosql_database_service.v1;

option java_multiple_files = true;
option java_outer_classname = "NosqlDatabaseServiceProto";
option java_package = "com.google.cmrt.sdk.nosql_database_service.v1";

import "cc/core/common/proto/common.proto";

// For faster allocations of sub-messages.
option cc_enable_arenas = true;

// Provides NoSQL Database functionalities.
service NoSqlDatabaseService {
  // Creates a table in the database.
  rpc CreateTable(CreateTableRequest)
      returns (CreateTableResponse) {}
  // Deletes a table from the database.
  rpc DeleteTable(DeleteTableRequest)
      returns (DeleteTableResponse) {}

  // Gets an item from the database.
  rpc GetDatabaseItem(GetDatabaseItemRequest)
      returns (GetDatabaseItemResponse) {}
  // Upserts an item into the database.
  rpc UpsertDatabaseItem(UpsertDatabaseItemRequest)
      returns (UpsertDatabaseItemResponse) {}
}

// An attribute of a database item.
message ItemAttribute {
  // The name of the attribute.
  string name = 1;

  // The value of the attribute - in the corresponding type.
  oneof value {
    // Value of the attribute - as an int32.
    int32 value_int = 2;

    // Value of the attribute - as a float.
    float value_float = 3;

    // Value of the attribute - as a double.
    double value_double = 4;

    // Value of the attribute - as a string.
    string value_string = 5;
  }
}

// Identifier for a database item.
message ItemKey {
  // The name of the table the item belongs to.
  string table_name = 1;

  // The partition key for the item.
  ItemAttribute partition_key = 2;

  // (Optional) The sort key for the item. If no sort_key is used for this
  // table, set as the empty string.
  optional ItemAttribute sort_key = 3;
}

// Request object for creating a table in the database.
message CreateTableRequest {
  // Contains the details for the table to be created.
  // table_name -> name of the table.
  // partition_key -> name of the partition key column and the type
  // (value is unimportant) for that column.
  // (optional) sort_key -> name of the sort key column and the type
  // (value is unimportant) for that column.
  ItemKey key = 1;
}

// Response object of creating a table in the database.
message CreateTableResponse {
  // The execution result.
  scp.core.common.proto.ExecutionResult result = 1;
}

// Request object for deleting a table from the database.
message DeleteTableRequest {
  // Name of the table to delete.
  string table_name = 1;
}

// Response object of deleting a table from the database.
message DeleteTableResponse {
  // The execution result.
  scp.core.common.proto.ExecutionResult result = 1;
}

// Describes an item - table name, keys, and attributes.
message Item {
  // The identifier for the item.
  ItemKey key = 1;

  // The attributes for the item.
  repeated ItemAttribute attributes = 2;
}

// Request object for getting an object out of the database.
message GetDatabaseItemRequest {
  // The key of the item to get.
  ItemKey key = 1;

  // (Optional) If you would like to ensure the entry in the DB has specific
  // attributes, enter them here. If not provided, the item matching the keys
  // will be returned. If the entry does not have these attributes, a NOT_FOUND
  // result will be returned.
  repeated ItemAttribute required_attributes = 2;
}

// Response object for getting an object out of the database.
message GetDatabaseItemResponse {
  // The execution result.
  scp.core.common.proto.ExecutionResult result = 1;

  // The item to get.
  Item item = 2;
}

// Request object for upserting an object into the database.
// Upserting can do 3 different operations:
// 1.) Insert Item:
//     key {
//       table_name: "table"
//       partition_key {
//         name: "part_key_name"
//         value_string: "some value"
//       }
//     }
//     // required_attributes must be empty.
//     new_attributes {
//       name: "attr1"
//       value_int: 1
//     }
// 2.) Blind update Item:
//     key {
//       table_name: "table"
//       partition_key {
//         name: "part_key_name"
//         value_string: "some value"
//       }
//     }
//     // required_attributes must be empty.
//     new_attributes {
//       name: "attr1"
//       value_int: 1
//     }
// 3.) Conditional update Item:
//     key {
//       table_name: "table"
//       partition_key {
//         name: "part_key_name"
//         value_string: "some value"
//       }
//     }
//     required_attributes {
//       name: "some_attr"
//       value_int: 10
//     }
//     new_attributes {
//       name: "attr1"
//       value_int: 1
//     }
// Note that 1.) and 2.) have the same form - this implies that if
// required_attributes is empty, then a CreateOrUpdate is performed.
message UpsertDatabaseItemRequest {
  // The identifier for the item to upsert.
  ItemKey key = 1;

  // (Optional) Used for conditional updating. List of attributes that the
  // existing entry must have in order for the update to happen. If the row
  // does not exist - upserting fails.
  repeated ItemAttribute required_attributes = 4;

  // The attributes for the Item to be given. These attributes
  // are *in addition* to the attributes the already existing item has
  // (if any). The attributes in this list will override existing attributes
  // if they exist in both the current entry and the proposed list.
  //
  // i.e. the item will end up with the union of the existing attributes in the
  // DB and new_attributes. The intersection of these 2 sets prefers entries
  // in new_attributes.
  repeated ItemAttribute new_attributes = 2;
}

// Response object for getting an object into the database.
message UpsertDatabaseItemResponse {
  // The execution result.
  scp.core.common.proto.ExecutionResult result = 1;
}
