syntax = "proto2";

package aggregate_api_simulation;

option java_package = "com.google.scp.simulation";
option java_outer_classname = "ReportProto";

// A simulated report for aggregation.
//
// This report consists of n records, per n-query model. The report is meant
// to be encrypted by the browser before being released on the wire.
message Report {

  // A single fact in the n-query model.
  message Fact {
    // Always set.
    // The conversion key. The bit-length is assumed to be divisible by 8 to make
    // it easy to pack the key into an ASCII string.
    optional string key = 1;

    // Always set.
    // Value of the conversion.
    optional int64 value = 2;
  }

  // May not be empty.
  // n-query records for the conversion.
  repeated Fact records = 2;

  // Always Set.
  // Privacy budget related data for aggregation.
  optional PrivacyBudgetKey privacy_budget_key = 3;

  // Always Set.
  // Intended eTLD+1 destination of the ad click
  optional string attribution_destination = 4;

  // Always Set.
  // Endpoint where the attribution report will be sent
  optional string attribution_report_to = 5;

  // Always Set.
  // Time at which report is made in milliseconds since epoch.
  optional int64 original_report_time = 6;

}

// Privacy Budget related data for aggregation
message PrivacyBudgetKey {
  // Always Set.
  optional string key = 1;

  // Always Set.
  // Time at which report is made in milliseconds since epoch rounded to the
  // nearest hour.
  optional int64 original_report_time = 2;
}


// Config for reports.
message ReportConfig {
  // Always set.
  // The bit-length of the conversion key. This value must be divisible by 8 to
  // pack into  ASCII string.
  optional int32 key_size = 1;

  // The number of n-query facts in a single report.
  optional int32 num_facts_per_report = 2;

  // Always set.
  // Params to generate a random `num_facts_per_report`.
  optional RandomParams random_num_facts_per_report_params = 3;

  // Always set.
  // Params to generate a random conversion key.
  optional RandomParams random_key_params = 4;

  // Always set.
  // Params to generate a random conversion value.
  optional RandomParams random_value_params = 5;
}

// Config for browser report which consists of many encrypted conversion
// reports.
message BrowserReportConfig {

  // Always set,
  // Number of reports to generate in browser report.
  optional int64 num_reports = 1;

  // Always Set.
  optional ReportConfig report_config = 2;
}

// Parameters to generates random variable with distribution in range
// [start, end).
message RandomParams {
  // Always Set.
  optional int32 start = 1;

  // May not be set for CONSTANT and TEST distributions.
  optional int32 end = 2;

  // Always Set.
  optional Distribution distribution = 3;

  enum Distribution {
    UNIFORM = 1;
    FILE = 2;
    TEST = 3;
  }
}

// Config for running simulations.
message SimulationConfig {
  // Always set.
  // Bit size of the public and private encryption keys.
  optional int32 encryption_key_size = 1;

  // Set true if browser reports should be generated.
  optional bool  run_browser_report = 2;

  // Set true if the aggregation step should be generated. Note if this
  // field is set without run_browser_report then the location of the browser
  // reports must also be specified.
  optional bool  run_aggregation = 3;

  // Location of asymmetric keys.
  // Set if keys should be written to a file.
  // Must be set if running aggregation without browser reports.
  optional string asymmetric_key_file_path = 4;

  // Set true if aggregation results should be logged.
  optional bool log_aggregation_results = 5;
}

// Config for the encryption key service.
message EncryptionKeyConfig {

  // Always set.
  // The encryption key id is used to identify the key to encrypt/decrypt with when using KMS.
  // Limit on number of encryption keys to encrypt a single browser report with.
  optional int32 num_encryption_keys = 1;
  optional string key_vending_service_uri = 2;

}
